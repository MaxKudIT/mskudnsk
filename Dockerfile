# Шаг 1: Возьмём официальный образ Node.js для сборки
FROM node:18-alpine AS builder
# Используем Alpine Linux - он очень маленький (всего 5MB)

# Шаг 2: Создадим рабочую папку в контейнере
WORKDIR /front
# Теперь все команды будут выполняться внутри /app

# Шаг 3: Скопируем только файлы зависимостей
COPY package.json package-lock.json ./
# Копируем отдельно, чтобы кэшировать установку зависимостей

# Шаг 4: Установим все зависимости
RUN npm ci
# npm ci быстрее чем npm install и строго следует lock-файлу

# Шаг 5: Скопируем ВЕСЬ проект
COPY . .
# Теперь в контейнере полная копия нашего проекта

# Шаг 6: Соберём React-приложение
RUN npm run build
# Эта команда создаст папку /app/build с оптимизированными файлами

# Шаг 7: Возьмём чистый Nginx для раздачи статики
FROM nginx:alpine
# Nginx - это быстрый веб-сервер для раздачи файлов

# Шаг 8: Скопируем собранный React из первого этапа
COPY --from=builder /front/build /usr/share/nginx/html
# Теперь Nginx будет раздавать нашу сборку

# Шаг 9: Скопируем наш конфиг Nginx
COPY ./nginx.conf /etc/nginx/conf.d/default.conf
# Заменяем стандартный конфиг на наш

# Шаг 10: Скажем Docker, что контейнер использует порт 80
EXPOSE 80
# Это просто документация, реальное открытие порта делается при запуске

# Шаг 11: Запустим Nginx
CMD ["nginx", "-g", "daemon off;"]
# "daemon off" запускает Nginx в основном процессе контейнера